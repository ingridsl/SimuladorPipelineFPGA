------- DECODE -----
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity EXECUTE is
	generic(WSIZE : natural := 32);
	port (
			clk		: in std_logic;
			saida1, saida2 : in std_logic_vector (WSIZE-1 downto 0);
			ResultULA: out std_logic_vector (WSIZE-1 downto 0);
			vai, zero, ovfl : out std_logic;
			fwdWrtReg1 : out std_logic_vector(4 downto 0)
			
	);
end EXECUTE;

architecture executeArc of EXECUTE is

component MUX_5bits is
	port(
			IN0, IN1: in std_logic_vector(4 downto 0);
			sel: in std_logic;
			S: out std_logic_vector(4 downto 0)
	);
end component;

component MUX_3
	port (
			IN0, IN1, IN2	: in std_logic_vector(WSIZE-1 downto 0);
			sel	: in std_logic_vector(1 downto 0);
			S	: out std_logic_vector(WSIZE-1 downto 0)
	);
end component;

component ulaMIPS
	port (
			--clk	: in std_logic;
			opcode	: in std_logic_vector(3 downto 0);
			A, B	: in std_logic_vector(WSIZE-1 downto 0);
			Z	: out std_logic_vector(WSIZE-1 downto 0);
			vai, zero, ovfl	: out std_logic
	);
end component;

----- EXECUTE
-- MUX1 e 2
signal ent1ULA, ent2ULA : std_logic_vector(WSIZE-1 downto 0);


begin	
	-- ALU
	-- MUX (SIGN_EXT X REG2)
	-- Chamada da ULA (REG1 + RESUL_MUX)
	-- SIGN_EXT -> SHIFT_LEFT 2 -> ADD PC_ATUAL
	
	MUX1: MUX_3 port map (saida1, WriData, ResultULA, OrigAALU, ent1ULA);
	MUX2: MUX_3 port map (saida2, WriData, ResultULA, OrigBALU, ent2ULA);
	ULA: ulaMIPS port map (ula_ctr, ent1ULA, ent2ULA, ResultULA, vai, zero, ovfl);
	MUXRegDst: MUX_5bits port map (instr(20 downto 16), instr(15 downto 11), RegDst, fwdWrtReg1);
	
end executeArc;