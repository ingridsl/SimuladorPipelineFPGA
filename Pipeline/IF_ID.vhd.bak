------- IF_ID -----
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity FETCH is
	generic(WSIZE : natural := 32);
	port (
			PCbranch	: in std_logic_vector(WSIZE-1 downto 0);
			OrigPC	: in std_logic;
			clk		: in std_logic;
			PCatual	: out std_logic_vector(WSIZE-1 downto 0);
			instr		: out std_logic_vector(WSIZE-1 downto 0)
	);
end FETCH;

architecture fetchArc of FETCH is

component PC
	port (
			--clk	: in std_logic := '1';
			pcNovo	: in std_logic_vector(WSIZE-1 downto 0);
			pcDepois	: out std_logic_vector(WSIZE-1 downto 0)
	);
end component;

component MUX
	port (
			IN0, IN1	: in std_logic_vector(WSIZE-1 downto 0);
			sel	: in std_logic;
			S	: out std_logic_vector(WSIZE-1 downto 0)
	);
end component;

component MUX_5bits is
	port(
			IN0, IN1: in std_logic_vector(4 downto 0);
			sel: in std_logic;
			S: out std_logic_vector(4 downto 0)
	);
end component;

component MUX_3
	port (
			IN0, IN1, IN2	: in std_logic_vector(WSIZE-1 downto 0);
			sel	: in std_logic_vector(1 downto 0);
			S	: out std_logic_vector(WSIZE-1 downto 0)
	);
end component;

component SOM
	port (
			a	: in std_logic_vector	((WSIZE-1) downto 0);
			b	: in std_logic_vector	((WSIZE-1) downto 0);
			result	: out std_logic_vector ((WSIZE-1) downto 0)
	);
end component;

component MemInst
	port (
			address	: IN STD_LOGIC_VECTOR (7 DOWNTO 0);
			clock	: IN STD_LOGIC  := '1';
			q	: OUT STD_LOGIC_VECTOR (31 DOWNTO 0)
	);
end component;

----- FETCH
signal saindoMUX, PCaux, PC4: std_logic_vector(WSIZE-1 downto 0) := (others => '0');
signal address	: STD_LOGIC_VECTOR (7 DOWNTO 0);

begin
	-- BUSCA
	-- Leitura da memória de instruções a partir do PC
	-- Incremento do PC (+4) + MUX (PC_INCREMENTADO X PC_BRANCH)
	
	MUX_PC: MUX port map (IN0 => PCbranch, IN1 => PC4, 
								 sel => OrigPC, S => saindoMUX); -- colocar controle OrigPC. para testar, trocar OrigPc para 1
	ATUAL_PC: PC port map (pcNovo => saindoMUX, 
								  pcDepois => PCaux);
	PCatual <= PCaux;
	INCR_PC: SOM port map (a => PCaux, b => (2 => '1', others => '0'),
								  result => PC4);
	-- arrumar instruçoes que estao atrasadas
	MEM_INSTR: MemInst port map (address => PCaux(9 downto 2), clock => clk,
										  q => instr);
	
end fetchArc;