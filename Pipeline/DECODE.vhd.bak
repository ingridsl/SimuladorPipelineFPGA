------- DECODE -----
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity DECODE is
	generic(WSIZE : natural := 32);
	port (
			clk		: in std_logic;
			rst		: in std_logic;
			ula_out  : out std_logic_vector(WSIZE-1 downto 0);
			inst_out	: out std_logic_vector(WSIZE-1 downto 0);
			data		: out std_logic_vector(WSIZE-1 downto 0);
			pc_out	: out std_logic_vector(WSIZE-1 downto 0);
			enfeite3	: out std_logic_vector(WSIZE-1 downto 0)
	);
end DECODE;

architecture decodeArc of DECODE is

component bregMIPS
	port (
			wren	: in std_logic;
			radd1, radd2, wadd	: in std_logic_vector(4 downto 0);
			wdata		: in std_logic_vector(WSIZE-1 downto 0);
			r1, r2	: out std_logic_vector(WSIZE-1 downto 0)
	);
end component;

component sign_ext
	port (
			imm16: in std_logic_vector(15 downto 0);
			imm32: out std_logic_vector(31 downto 0)
	);
end component;

component SOM
	port (
			a	: in std_logic_vector	((WSIZE-1) downto 0);
			b	: in std_logic_vector	((WSIZE-1) downto 0);
			result	: out std_logic_vector ((WSIZE-1) downto 0)
	);
end component;

component ulaCONTROL is
	port (
			op_alu		: in std_logic_vector(2 downto 0);
			funct			: in std_logic_vector(5 downto 0);
			alu_ctr	   : out std_logic_vector(3 downto 0)
	);
end component;

component ShiftLeft is
	port(
			INP: in std_logic_vector(WSIZE-1 downto 0);
			OUTP: out std_logic_vector(WSIZE-1 downto 0)
	);
end component;

component CONTROL is
	PORT (
			clk, rst	: IN std_logic;
			opcode	: IN std_logic_vector (5 DOWNTO 0);
			wr_ir		: OUT std_logic;
			wr_pc		: OUT std_logic;
			wr_mem	: OUT std_logic;
			is_beq	: OUT std_logic; 
			is_bne	: OUT std_logic;
			s_datareg: OUT std_logic;
			op_alu	: OUT std_logic_vector (2 DOWNTO 0);
			s_mem_add: OUT std_logic;
			s_PCin	: OUT std_logic;
			s_aluAin : OUT std_logic_vector (1 DOWNTO 0);
			s_aluBin : OUT std_logic_vector (1 DOWNTO 0); 
			wr_breg	: OUT std_logic;
			s_reg_add: OUT std_logic;
			is_BxxZ  : OUT std_logic
	);
end component;

----- DECODE
-- BREG
signal wadd : std_logic_vector(4 downto 0);
signal wdata : std_logic_vector(WSIZE-1 downto 0);
signal saida1, saida2 : std_logic_vector(WSIZE-1 downto 0);

-- SIGN_EXT 
signal imm32 : std_logic_vector(31 downto 0);

-- CONTROLE
signal 	ula_ctr : std_logic_vector(3 downto 0); -- ulaCONTROL
signal	EscreveIR		: std_logic;
signal	EscrevePC		: std_logic;
signal	EscreveMem	: std_logic;
signal	EscrevePCCond	: std_logic; 
signal	Branchifnotequal	: std_logic;
signal	MemparaReg	: std_logic;
signal	opULA	: std_logic_vector (2 DOWNTO 0);
signal	IouD	: std_logic; -- não usamos
signal	OrigPC	: std_logic;
signal	OrigAALU : std_logic_vector (1 DOWNTO 0);
signal	OrigBALU : std_logic_vector (1 DOWNTO 0); 
signal	EscreveReg	: std_logic;
signal	RegDst	: std_logic;
signal	is_BxxZ  : std_logic;

begin
	-- BANCO REGS/CONTROL
	-- Mudança do "instr" deve chamar breg (saída da leitura de instrução) ->
	-- Ver dados de leitura [instr(25 downto 21) e instr(20 downto 16)], 
	-- escrita [instr(15 downto 11) - conferir momento da chamada deste], 
	-- controle para isso [wren]
	-- Sign extend [instr(15 downto 0)]
	
	CTRL: CONTROL port map (clk, rst, instr(31 downto 26), EscreveIR, EscrevePC,
										EscreveMem, EscrevePCCond, branchifnotequal, MemparaReg, opULA, IouD,
										OrigPC, OrigAALU, OrigBALU, EscreveReg, RegDst, is_BxxZ);
	ULACONTR: ulaCONTROL port map (opULA, instr(5 downto 0), ula_ctr);
	BREG: bregMIPS port map (EscreveReg, instr(25 downto 21), instr(20 downto 16), wadd, wdata, saida1, saida2);
	SIGNEXT: sign_ext port map (instr(15 downto 0), imm32);
	SHL: ShiftLeft port map (imm32, OUTP => saidaSh);
	SOMB: SOM port map (saidaSh, PCatual, PCbranch);
	
end pipelineArc;